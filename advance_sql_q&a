-- 25 Window Functions Questions

-- These involve ranking, running totals, partitioning, etc. 
-- You’ll typically use functions like ROW_NUMBER(), RANK(), DENSE_RANK(), LAG(), LEAD(), SUM() OVER(...), etc. 

-- 	1.	Calculate a running total of orders by date in the orders table, partitioned by customer_id.
select order_id, customer_id , order_date, sum(total_amount) OVER (Partition BY customer_id order by order_date ROWS between unbounded preceding AND Current ROW) AS Running_Total
from orders;
 
-- 	2.	Assign a ROW_NUMBER() to each order for each customer, ordered by order_date ascending.
Select c.first_name, c.last_name, c.customer_id,o.order_date,o.order_id,
		ROW_NUMBER() OVER (Partition by o.customer_id ORDER BY o.order_date ASC) as customer_rank
        from customers c
        join orders o 
        on c.customer_id = o.customer_id
        order by o.order_date, c.customer_id;
        
-- 	3.	Rank products by total quantity sold using RANK() or DENSE_RANK() 
-- (partitioning might not be needed if it’s across all products).

WITH cte_product_sales AS(SELECT
p.product_id, p.product_name, sum(oi.quantity) as total_sold
from order_items oi 
join products p 
on p.product_id = oi.product_id
group by p.product_id, p.product_name)
select product_id, product_name, total_sold,
	RANK() OVER (ORDER BY total_sold DESC) AS product_rank,
    DENSE_RANK() OVER (ORDER BY total_sold DESC) as product_dense_rank
    from cte_product_sales;
    
-- 	4.	Find the top 2 products in each category by total quantity sold (partition by category).
with product_sales as (SELECT SUM(oi.quantity) as total_sold, oi.product_id, p.product_name, p.category
from order_items oi 
join products p 
on oi.product_id = p.product_id
group by p.product_name, p.category, p.product_id)
SELECT category, product_id, product_name, total_sold
	from (select ps.*, ROW_NUMBER() OVER(Partition by category order by total_sold DESC) as rn
		  from product_sales ps ) as t
          where rn <=2
          order by category, rn;

WITH product_sales AS (   -- CTE
    SELECT
        p.category,
        p.product_id,
        p.product_name,
        SUM(oi.quantity) AS total_sold
    FROM order_items oi
    JOIN products p ON p.product_id = oi.product_id
    GROUP BY p.category, p.product_id, p.product_name
)
SELECT
    ps.*,                                -- ← this expands to the four columns above
    ROW_NUMBER() OVER (
        PARTITION BY category
        ORDER BY total_sold DESC
    ) AS rn
FROM product_sales ps;  -- ps is just an alias for the CTE

WITH sales AS (
  SELECT p.category, p.product_id, SUM(oi.quantity) AS total_sold
  FROM order_items oi
  JOIN products p ON p.product_id = oi.product_id
  GROUP BY p.category, p.product_id
)
SELECT category, product_id, total_sold
FROM (
  SELECT sales.*,
         ROW_NUMBER() OVER (PARTITION BY category ORDER BY total_sold DESC) AS rn
  FROM sales
) as t;

-- 	5.	Compute each employee’s cumulative salary over time, ordered by hire_date. 
select employee_id, first_name, last_name, hire_date, salary, SUM(salary) OVER (ORDER BY hire_date) as salary_over_time
from employees
order by hire_date;

-- 	6.	Show each order_item with a running total of quantity partitioned by order_id.
select order_item_id, order_id, product_id , quantity , SUM(quantity) OVER ( PARTITION BY order_id order by order_item_id) as running_total
from order_items;

-- 	7.	For each product, calculate the average item_price and then show a difference from the current row’s 
--      item_price using LAG() or LEAD().

select p.product_name, p.product_id, p.category,oi.order_id,
	   AVG(oi.item_price) OVER (PARTITION BY oi.product_id) as avg_item_price,
       LEAD(oi.item_price) OVER (partition by oi.product_id ORDER BY p.created_at) as next_price,
       LAG(oi.item_price) OVER (PARTITION BY oi.product_id ORDER BY p.created_at) as prev_price,
       -- check price diff from the previous 
       oi.item_price - LAG(oi.item_price) OVER (PARTITION BY oi.product_id ORDER BY p.created_at) as diff_from_prev,
       LEAD(oi.item_price) OVER (PARTITION BY oi.product_id ORDER BY p.created_at) as diff_to_next
       from products p 
       join order_items oi 
       on p.product_id = oi.product_id
       ORDER BY p.created_at;
    
-- 	8.	Determine the percentage of total quantity sold for each product 
-- (e.g., (quantity / SUM(quantity) OVER()) * 100).
WITH CTE_avg_order AS (SELECT ((oi.quantity)/SUM(oi.quantity) * 100) AS avg_item_quantity, p.product_id, p.product_name
from order_items oi 
left join products p 
on oi.product_id = p.product_id
GROUP BY p.product_id)

select 
product_id, 
product_name, 
AVG(avg_item_quantity) OVER (PARTITION BY product_id ORDER BY product_id)
from CTE_avg_order; 

WITH product_totals AS (
    SELECT
        p.product_id,
        p.product_name,
        SUM(oi.quantity) AS product_qty
    FROM order_items oi
    JOIN products     p ON p.product_id = oi.product_id
    GROUP BY p.product_id, p.product_name
)
SELECT
    product_id,
    product_name,
    product_qty,
    100.0 * product_qty
          / SUM(product_qty) OVER () AS pct_of_total
FROM product_totals
ORDER BY pct_of_total DESC;


-- 	9.	List all customers with a row_number based on the order in which they joined (ORDER BY created_at).

select customer_id, first_name, last_name, email,
RANK() OVER(ORDER BY created_at ASC) as "RAnk_as_Joined",
DENSE_RANK() OVER(ORDER BY created_at) as "Desnsed_rank_as_joined"
from customers;

-- 	10.	Compute the average order amount per customer and show how each order compares to the average (difference).
select o.order_id, c.customer_id,o.order_date,
AVG(COALESCE(o.total_amount,0)) OVER (Partition by c.customer_id) AS AvgOrderAmount,
AVG(COALESCE(o.total_amount,0)) OVER (Partition by c.customer_id ORDER BY order_date ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS MovingAvg 
from orders o 
left join customers c 
on o.customer_id = o.customer_id;


-- 	11.	Show each employee’s salary and the highest salary in their department (partition by department).

select first_name, last_name , department , salary ,
MAX(salary) OVER (PARTITION BY department ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS MaxSalaryDEPT
from employees; 

-- 	12.	Use LAG() to show how total_amount of the current order differs from the previous order by the same customer.
select total_amount, order_id, customer_id,
LAG(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date) AS DifffromPrevOrder
from orders;

-- 	13.	Assign a DENSE_RANK() of employees by salary, highest to lowest.
Select first_name, last_name, department, salary, 
dense_rank() OVER (ORDER BY salary DESC) as DesnsedRank
from Employees;
